# Multi-stage build for ultra-minimal Railway deployment
FROM python:3.11-slim as builder

# Set build environment variables
ENV PIP_NO_CACHE_DIR=1 \
    PIP_DISABLE_PIP_VERSION_CHECK=1

# Install build dependencies
RUN apt-get update && apt-get install -y --no-install-recommends \
    build-essential \
    libpq-dev \
    && rm -rf /var/lib/apt/lists/*

# Create virtual environment
RUN python -m venv /opt/venv
ENV PATH="/opt/venv/bin:$PATH"

# Install Python dependencies
COPY backend/requirements-minimal.txt requirements.txt
RUN pip install --no-cache-dir -r requirements.txt

# Production stage - ultra minimal
FROM python:3.11-slim

# Set runtime environment variables
ENV PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    PATH="/opt/venv/bin:$PATH" \
    PORT=8000

# Install only runtime dependencies
RUN apt-get update && apt-get install -y --no-install-recommends \
    libpq5 \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean \
    && apt-get autoremove -y

# Create app user
RUN addgroup --system app && adduser --system --group app

# Copy virtual environment from builder (smaller than system install)
COPY --from=builder /opt/venv /opt/venv

# Set work directory
WORKDIR /app

# Copy only essential application code
COPY --chown=app:app backend/app app/
COPY --chown=app:app backend/alembic alembic/
COPY --chown=app:app backend/alembic.ini alembic.ini

# Create necessary directories
RUN mkdir -p uploads sqlite_db \
    && chown -R app:app /app

# Switch to app user
USER app

# Expose port (Railway will override with PORT env var)
EXPOSE $PORT

# Create startup script to handle PORT properly
RUN echo '#!/bin/bash\nexec uvicorn app.main:app --host 0.0.0.0 --port ${PORT:-8000} --workers 1' > /app/start.sh \
    && chmod +x /app/start.sh

# Run the application with Railway PORT support
CMD ["/app/start.sh"] 